//////////////
//ГЕНЕРАТОРЫ//
//////////////
//Простой генератор, возвращающий значения
function gen1(){
    for($i = 0; $i < 10; $i++) yield $i;
}
foreach(gen1() as $value) echo $value . PHP_EOL;

//Простой генератор, возвращающий пару ключ/значение
function gen2(){
    for($i = 0; $i < 10; $i++) yield $i=>$i+1;
}
foreach(gen2() as $key => $value) echo $key . ' - ' . $value . PHP_EOL;

//Простой генератор и спользование методов send() и next();
function gen3(){
    echo yield . PHP_EOL; //1
    echo "===" . PHP_EOL; //===
    echo yield . PHP_EOL; //
    echo "===" . PHP_EOL; //===
    echo yield . PHP_EOL; //2
}
$generator = gen3();
$generator->send(1);
$generator->next();
$generator->send(2);
$generator->send(3);

//Комбинация ввода и вывода в генератор
function gen4(){
    echo (yield "Hello");
}
$generator = gen4();
echo $generator->current();
$generator->send(", World!");

//Правильное закрытие дескриптора файла в фукции, возвращающей генератор
function readErrorLog(){
    try{
        $f = fopen('/var/log/apache2/error.log', 'r');
        while(!feof($f)){
            yield fgets($f);
        }
    } finally {
        fclose($f);
    }
}
foreach(readErrorLog() as $line){
    echo $line . PHP_EOF;
}

//Созданиe дочернего процесса php с помощью расширения pcntl
$pid = pcntl_fork();
if($pid !== 0){
    pcntl_setpriority(10);
    echo "Parent" . PHP_EOL;
}
else{
    pcntl_setpriority(5);
    echo "Child" . PHP_EOL;
}

//Обход ошибки в которой iconv возвращает false
$content = iconv('CP1251//TRANSLIT','UTF-8',$content);
$content = iconv('CP1251//IGNORE','UTF-8',$content);

//REFLECTION API
//Исследование классов с помощью ReflectionClass
$rc = new ReflectionClass('User');
//print_r(get_class_methods($rc));
$rc->getName();
$rc->getShortName();
$rc->hasMethod('methodName');

//Исследование методов с помощью ReflectionMethod
$rm = new ReflectionMethod('NS\User', 'getData');
$rm->isPublic();
//Вызов метода
$user = new NS\User;
$rm->invoke($user);
$rm->invokeArgs($user, array());

//Исследование свойств с помощью ReflectionProperty
$rp = new ReflectionProperty('NS\User', 'data');
$rp->getName();
$rp->setAccessible();
$user = new NS\User;
$rp->getValue($user);

//Исследование параметров с помощью ReflectionParameter
$rp = new ReflectionParameter(array('NS\User', 'setData'), 0); //0-ой параметр
$rp->isOptional();

//Исследование объектов с помощью ReflectionObject
$user = new NS\User;
$ro = new ReflectionObject($user);
$ro->getNamespaceName();

