<p><span><a class="book_link" href="docs/books/download/nosql.pdf" target="_blank">NoSQL. Новая методология разработки нереляционных баз данных</a></span></p>

//Проблемы реляционных субд
1. Несоответствие реляционных моделей и структур, хранящихся в памяти
2. Реляционные субд не предназначены для работы на кластерах

//Характеристики субд NoSQL
1. Отсутствие схем данных
2. Отсутствие SQL
3. Эффективная работа на кластерах
4. Как правило Open Source
5. Многовариантная персистентность (Polyglot Persistence), которая определяет, 
что реляционный СУБД dвсего лишь один вариант хранения данных.

//Проблемы NoSQL
1. Отсутствие "ACID" (только у агрегатно ориентированных),
вместо "ACID" в NoSQL присутствует "BASE"
2. Часто агрегатно-ориентированные СУБД предоставляют пользователям данные, 
организованные не так как в исходных агрегатах. 
Для этого используются вычисления "отображения-свертка" (паттерн map reduce)


//Основные критерии для выбора NoSQL СУБД
1. Объемы данных и необходимая производительность, вынуждающая использование кластера
2. Необходимость повышения производительности разработки с помощью более удобного хранения данных

//Определение агрегата
Агрегат - коллекция данных, с которой мы взаимодействуем как с отдельной единицей.
Агрегаты упрощают управление хранением данных на кластерах.

//Класификации NoSQL субд по модели данных
1. Ключ-значение (агрегатная ориентация): тупое и быстрое хранение пар ключ/значение, значение при этом - чернгый ящик.
Memcached, Redis, LevelDb, Project Voldemort, Riak
2. Документ (агрегатная ориентация):
CouchDb, MongoDb, OrientDB, RavenDb, Terrastore
3. семенство столбцов (агрегатная ориентация): представляются в виде двухуровневого ассоциативного массива
Cassandra, HBase, Hypertable
4. Граф (поддерживают индексы): Организуют данные в виде графа из узлов и ребер.
HyperGraphDb, Neo4j, OrientDb

//JSON
Основной способ представления данных в NoSQL - JSON.

//Способы распределения данных
1. Односерверная репликация
2. Фрагментация
3. Репликация "Master-slave"
4. Одноранговая репликация
5. Сочетание фрагментации и репликации

//Фрагментация
При фрагментации днные распределяются по нескольник серверам, 
каждый сервер - отдельный источник данных.

//Репликация
При репликации данные копируются между несколькими серверами, 
что каждый бит данных можно найти в разных местах.

//Согласованность
1. Согласованность обновления
2. Согласованность чтения
3. Ослабление согласованности
4. Теорема САР
5. Кворумы

//Штампы версий
Штампы версий позволяют выявить конфликты при параллельной работе
1. Счетчик обновлений
2. Создание GUID идентификатора, который гарантировано уникален.
3. ХЭШ ресурса
4. Метка времени последнего обновления

//Вектор штампов
В распределенной системе вектор штампов позволяет обнаружить, 
когда на разных узлах возможны конфликтующие обновления.

//MAP REDUCE (Отображения-свертка)
Включает 2 шага:
1. Отображение: получени пар ключ/знчение из агрегатов.
2. Свертка: Объединения отображений по ключам.
