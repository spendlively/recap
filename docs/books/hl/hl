Подходы к построению архитектуры: 
    - Монолитное приложение
    - Сервис-ориентированная архитектура (отдельный сервис на каждую задачу, оверхед на взаимодействие м/у сервисами и обработку api-взаимодействия между слоями)

Подходы разработки soa: 
    - Промышленный (средства масштабирование разрабатываются отдельно)
    - Ремесленный (разработчик имеет все полномочия при создании модуля, быстрая разработка, высокие требования к квалификации разработчика, максимально эффективное использование технологий и аппаратного обеспечения)

Масштабирование: вертикальное, горизонтальное, масштабирование во времени

Трехзвенная архитектура: фронтэнд, бэкэнд и хранилище данных

Фронтэнд: 
    - отдача статики, 
    - буферизация запросов (для данных запроса браузера и ответа бэкенда nginx создает буфер - если даных много, то пишет из буфера на диск)
    - масштабирование бэкендов (проблемы с антишквалом: промежуточное звено с очередью из которой бэкенд сам забирает задачи, умные запросы от бэкенда: увеличение таймаута 1,2,3,стоп, бекенд определяет, не перегружен ли он, кешируя LA)
    - обслужевание медленных клиентов,
    - кеширование (где ключ: uri + get-параметр)

Аспекты масштабирование фронтэндов:
    - отправка запроса на рабочую машину
    - определение, какая пашина работает

Способы масштабирование фронтэндов:
    - DNS балансировка (TTL в 5 или 1 минут)
    - выделеная железка, IPVS
    - технология Mongrel2, используемая в мире Ruby ( Фронтенды накапливают у себя очередь на запросы, а огромное количество бэкендов эти фронтенды опрашивает:  «Дай чего-нибудь обработать, дай на подумать» — и возвращает ответ. Таким образом, мы получаем масштабируемую асинхронную обработку)

Правило: решаем проблемы по мере их появления, каждый раз выбирая наиболее простое решение из всех возможных

Отказоустойчивость фронтэнда: для большинства сайтов хватит кластера из 2-х пар машин для фронтэндов, у каждой по 2 сетевых интерфейса (1 - в мир, с одинаковым ip, 2 - чтобы слушать и мониторить друг друга), как только первая умирает - поднимается ip на второй (CARP (во FreeBSD), Heartbeat (в Linux))

Масштабирование бэкендов:
    - функциональное разделение (сайт и форум, статьи и баннеры)
    - классическое горизонтальное масштабирование

Концепции классического горизонтального масштабирования:
    - Shared Nothing - каждый узел является независимым, самодостаточным и нет какой-то единой точки отказа, если каждый узел является независимым, то мы легко можем добавить еще несколько — по росту нагрузки.
    - Stateless - процесс программы не хранит свое состояние, пользователь может каждый раз попадать на разные серверы - можно  динамически менять количество серверов.

Минусы: иногда нужно посылать пользователя на один и тот же сервер, сохраняя все данные.

Советы для масштабирования:
    - слоистость кода (легко переписывать целые слои, пример: выделение слоя для работы с бд (Фаулер), легко прикрутить шардинг, кеширование, несколько бд)
    - низкая связанность кода
    - минимизация использования сложных запросов сразу к нескольким таблицам - общаться с хранилищем минимально простыми запросами, итерациями, шагами,  а если без JOIN’а не обойтись, делать два запроса и перемножить в PHP.

Ключевые моменты кэширования:
    - кэш должен отдавать данные быстрее, чем они вычисляются
    - кэш должен быть единым для всех бэкендов

Кэш - способ замазать проблему, т.к. прибавляется множнство проблем с инвалидацией кеша.

Масштабирование во времени:
    - отложенные вычисления (перехват стадии постобработки запроса apache в mod_perl, если действия не займут много времени)
    - асинхронная обработка (разнесенная во времени асинхронная обработка из промежуточного хранилища) - статистика уникальных посетителей, разработка баннерных сетей, счетчиков и других подобных проектов.
    - очереди FIFO (первый вошел — первый вышел) - RabbitMQ (www.rabbitmq.com)

Масштабирование бд:
  - Тюнинг запросов
  - Шардинг - разрезание данных между серверами(парадигма с ящиками)
  - Виртуальный шардинг
  - Репликация
  - Партицирование
  - Кластеризация
  - Денормализация