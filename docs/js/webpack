/////////////////////////////////////////////////////////////////////////
//////////////////////ГЛОБАЛЬНАЯ ОБЛАСТь ВИДИМОСТИ///////////////////////
/////////////////////////////////////////////////////////////////////////
//Преимущества - простота
//Hello.js
function Hello(){
    this.text = "Hello";
}

Hello.prototype.getHello = function(){
    return this.text;
}

//HelloWorld.js
function HelloWorld(){
    this.text = "World";
}

HelloWorld.prototype.getHelloWorld = function(){

    var hello = new Hello();

    return hello.getHello() + ', ' + this.text + '!';
}

//main.js
var helloWorld = new HelloWorld();
alert(helloWorld.getHelloWorld());


//Запуск
<script src="js-global/Hello.js"></script>
<script src="js-global/HelloWorld.js"></script>
<script src="js-global/main.js"></script>




/////////////////////////////////////////////////////////////////////////
//////////////////////////AMD (requirejs)////////////////////////////////
/////////////////////////////////////////////////////////////////////////
//Преимущества - асинхронность
//Hello.js
define(function(){

    function Hello(){
        this.text = "Hello";
    }

    Hello.prototype.getHello = function(){
        return this.text;
    }

    return Hello;
});

//HelloWorld.js
define(['Hello'], function(Hello){

    function HelloWorld(){
        this.text = "World";
    }

    HelloWorld.prototype.getHelloWorld = function(){

        var hello = new Hello();

        return hello.getHello() + ', ' + this.text + '!';
    }

    return HelloWorld;
});

//main.js
require(['HelloWorld'], function(HelloWorld){

    var helloWorld = new HelloWorld();
    alert(helloWorld.getHelloWorld());
});


//Запуск
<script data-main="js-amd/main.js" src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.17/require.min.js"></script>



/////////////////////////////////////////////////////////////////////////
///////////////////////AMD (requirejs) + webpack/////////////////////////
/////////////////////////////////////////////////////////////////////////
//Hello.js, HelloWorld.js, main.js 
Из предыдущего примера

//webpack.config.js
module.exports = {
    //где у приложения точка входа
    entry: "./main",
    resolve: {
        //где искать модули
        modulesDirectories: [
            "."
        ]
    },
    //как назвать и куда положить файл бандла на выходе
    output: {
        //Также откуда подгружать 1.bundle.js
        publicPath: "js-amd/",
        filename: "bundle.js"
    }
};

//Сборка
webpack

//Запуск
<script src="js-amd/bundle.js"></script>

/////////////////////////////////////////////////////////////////////////
///////////////////////AMD (requirejs) + r.js////////////////////////////
/////////////////////////////////////////////////////////////////////////
Потом допишу


/////////////////////////////////////////////////////////////////////////
//////////////////////////CommonJS (browserify)//////////////////////////
/////////////////////////////////////////////////////////////////////////
//Преимущества - использование модулей nodejs

//Hello.js
function Hello(){
    this.text = "Hello";
}

Hello.prototype.getHello = function(){
    return this.text;
}

module.exports = Hello;


//HelloWorld.js
function HelloWorld(){
    this.text = "World";
}

HelloWorld.prototype.getHelloWorld = function(){

    var Hello = require('./Hello');
    var hello = new Hello();

    return hello.getHello() + ', ' + this.text + '!';
}

module.exports = HelloWorld;


//main.js
var HelloWorld = require('./HelloWorld');
var helloWorld = new HelloWorld();
alert(helloWorld.getHelloWorld());

//Сборка
sudo npm install -g browserify
browserify main.js > bundle.js

//Запуск
<script src="js-common/bundle.js"></script>


/////////////////////////////////////////////////////////////////////////
////////////////////CommonJS (browserify) + webpack//////////////////////
/////////////////////////////////////////////////////////////////////////
//Hello.js, HelloWorld.js, main.js 
Из предыдущего примера

//webpack.config.js (такой же как и у AMD)
module.exports = {
    //где у приложения точка входа
    entry: "./main",
    resolve: {
        //где искать модули
        modulesDirectories: [
            "."
        ]
    },
    //как назвать и куда положить файл бандла на выходе
    output: {
        publicPath: "js-amd/",
        filename: "bundle.js"
    }
};

//Запуск
<script src="js-common/bundle.js"></script>


/////////////////////////////////////////////////////////////////////////
/////////////////////////////ES6 + webpack///////////////////////////////
/////////////////////////////////////////////////////////////////////////
//Hello.js
class Hello {

    constructor() {
        this.text = "Hello";
    }

    getHello() {
        return this.text;
    }
}

export default Hello;


//HelloWorld.js
import Hello from "./Hello";

class HelloWorld {

    constructor() {
        this.text = "World";
    }

    getHelloWorld() {

        let hello = new Hello();

        return hello.getHello() + ', ' + this.text + '!';
    }
}

export default HelloWorld;


//main.js
import HelloWorld from "./HelloWorld";

let helloWorld = new HelloWorld();
alert(helloWorld.getHelloWorld());


//package.json для установки Babel для es6
{
  "name": "webpack-example-07",
  "version": "0.0.0",
  "description": "",
  "main": "main.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "BSD-2-Clause",
  "devDependencies": {
    "babel-core": "~5.1.10",
    "webpack": "~1.8.4",
    "babel-loader": "~5.0.0"
  }
}

//Установка Babel для es6
npm install

//webpack.config.js
module.exports = {
    entry: "./main",
    resolve: {
        modulesDirectories: [
            "."
        ]
    },
    output: {
        publicPath: "js-common/",
        filename: "bundle.js"
    },
    module: {
        loaders: [
            {
                test: /\.js$/,
                loader: "babel-loader"
            }
        ]
    }
};

//Сборка
webpack

//Запуск
<script src="js-es6/bundle.js"></script>
