//ССЫЛКИ
//Документация
https://facebook.github.io/react/docs/getting-started.html

//Песочница с JSX
https://jsfiddle.net/reactjs/69z2wepo/

//Песочница без JSX
https://jsfiddle.net/reactjs/5vjqabv3/

//Синтаксис JSX
https://facebook.github.io/react/docs/jsx-in-depth.html

//Подгрузка react c CDN
<script src="https://unpkg.com/react@15.3.1/dist/react.js"></script>
<script src="https://unpkg.com/react-dom@15.3.1/dist/react-dom.js"></script>
<script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>
<script src="https://unpkg.com/jquery@3.1.0/dist/jquery.min.js"></script>
<script src="https://unpkg.com/remarkable@1.6.2/dist/remarkable.min.js"></script>

//Рендеринг компонента на лету с JSX в div#example
<script type="text/babel">
  ReactDOM.render(
    <h1>Hello, world!</h1>,
    document.getElementById('example')
  );
</script>

//Создание компонента CommentBox и рендеринг его в #CommentBox
var CommentBox = React.createClass({
  render: function() {
    return (
      <div className="commentBox">
        Hello, world! I am a CommentBox.
      </div>
    );
  }
});
ReactDOM.render(
  <CommentBox />,
  document.getElementById('content')
);

//Создание компонента CommentBox и рендеринг его в #CommentBox БЕЗ ИСПОЛЬЗОАНИЯ JSX
var CommentBox = React.createClass({displayName: 'CommentBox',
  render: function() {
    return (
      React.createElement('div', {className: "commentBox"},
        "Hello, world! I am a CommentBox."
      )
    );
  }
});
ReactDOM.render(
  React.createElement(CommentBox, null),
  document.getElementById('content')
);

//ВАЖНЫЕ МОМЕНТЫ
1. React-компоненты начинаются с заглавной буквы (CommentBox => <CommentBox />)
2. ReactDOM.render всегда должен вызываться после того, как соответствующий компонент объявлен

//Композиция элементов
var Child = React.createClass({
  render: function() {
    return (<div>Child</div>);
  }
});
var Parent = React.createClass({
  render: function() {
    return (<div>Parent<Child /></div>);
  }
});
ReactDOM.render(<Parent />, document.body);

//Передача данных в компонент используя this.props
var Dollar = React.createClass({
  render: function() {
    return (<div>Dollar = {this.props.price} {this.props.children}</div>);
  }
});
ReactDOM.render(<Dollar price="65">RUB</Dollar>, document.body);

//Использование Markdown для форматирования текста
var Dollar = React.createClass({
    
  rawMarkup: function() {
    var md = new Remarkable();
    var rawMarkup = md.render(this.props.children.toString());
    return { __html: rawMarkup };
  },    
    
  render: function() {
    var md = new Remarkable();
    return (<div>Dollar = {this.props.price} <strong dangerouslySetInnerHTML={this.rawMarkup()} /></div>); //
  }
});
ReactDOM.render(<Dollar price="65">RUB</Dollar>, document.body);

//СИСТЕМА КОММЕНТАРИЕВ
var data = [
  {id: 1, author: "Pete Hunt", text: "This is one comment"},
  {id: 2, author: "Jordan Walke", text: "This is *another* comment"}
];        
        
var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment author={comment.author} key={comment.id}>
          {comment.text}
        </Comment>
      );
    });
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});

var CommentForm = React.createClass({
  render: function() {
    return (
      <div className="commentForm">
        Hello, world! I am a CommentForm.
      </div>
    );
  }
});

var CommentBox = React.createClass({
  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.props.data} />
        <CommentForm />
      </div>
    );
  }
});

var Comment = React.createClass({
  rawMarkup: function() {
    var md = new Remarkable();
    var rawMarkup = md.render(this.props.children.toString());
    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

ReactDOM.render(
  <CommentBox data={data} />,
  document.getElementById('content')
);
//END СИСТЕМА КОММЕНТАРИЕВ

//Получение данных от сервера //{"name": "ivan", "age": "30"}
//this.state = приватное свойство, при изменении которого (this.setState()) - обновляется DOM
//getInitialState - Вызывается единажды при инициализации
//componentDidMount - вызывается автоматически когда компонент отрендерен в первый раз
//getData.json ==> {"name": "Petrov"}
var me;
var User = React.createClass({
  getInitialState: function() {
    return {data: {name: 'Ivanov'}};
  },
  componentDidMount: function() {

    var me = this;

    $.ajax({
      url: '/getData.json',
      dataType: 'json',
      cache: false,
      success: function(data) {

        me.setState({data: data});

        setTimeout(function(){
          me.setState({data: {name: 'Sidorov'}});
        }, 2000);
      },
      error: function(xhr, status, err) {
        console.error(status, err.toString());
      }
    });
  },
  render: function() {
    return (
      <div><h1>{this.state.data.name}</h1></div>
    );
  }
});

ReactDOM.render(
  <User />,
  document.getElementById('content')
);

//Обновление DOM при изменении поля формы,
//чтобы данные формы попали в DOM
var Form = React.createClass({
  getInitialState: function() {
    return {name: ''};
  },
  handleNameChange: function(e) {
    console.log(e.target.value);
    this.setState({name: e.target.value});
  },
  render: function() {
    return (
      <form>
        <input
          type="text"
          placeholder="Name"
          value={this.state.name}
          onChange={this.handleNameChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

ReactDOM.render(
  <Form />,
  document.getElementById('content')
);

//Событие отправки формы и очистка поля
var Form = React.createClass({
  getInitialState: function() {
    return {name: ''};
  },
  handleNameChange: function(e) {
    console.log(e.target.value);
    this.setState({name: e.target.value});
  },
  handleSubmit: function(e) {
    //Предотвращение действия браузера
    e.preventDefault();
    var name = this.state.name.trim();
    if (!name) {
      return;
    }
    // TODO: send request to the server
    this.setState({name: ''});
  },
  render: function() {
    return (
      <form onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Name"
          value={this.state.name}
          onChange={this.handleNameChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

ReactDOM.render(
  <Form />,
  document.getElementById('content')
);

//Обработчик события можно передать в свойства дочернему компоненту
<Form onCommentSubmit={this.handleCommentSubmit} />
//А в дочернем компоненте вызвать переданный обработчик
handleSubmit: function(e) {
  this.props.onCommentSubmit({author: author, text: text});
}

//ОБРАБОТКА СОБЫТИЙ DOM В КОМПОНЕНТЕ (Возвращается MouseEvent)
...
//When component is mounted and has a DOM representation
componentDidMount: function(){
    window.addEventListener('click', function(e){
        console.log(e) //MouseEvent
        e.stopPropagation();
        e.preventDefault();s
    });
},
...
//ЛИБО (Возвращается SyntheticMouseEvent)
clickHandler: function(e){
    console.log(e) //SyntheticMouseEvent
},
render: function(){
    return (<h1 onClick={this.clickHandler}>TEST!</h1>);
}
...
//список событий https://facebook.github.io/react/docs/events.html
//END ОБРАБОТКА СОБЫТИЙ DOM В КОМПОНЕНТЕ

//ЖИЗНЕННЫЙ ЦИКЛ КОМПОНЕНТА
var Test = React.createClass({
    getDefaultProps: function(){
        console.log('getDefaultProps');
        return {};
    },
    getInitialState: function(){
        console.log('getInitialState');
        return {text: 'text'};
    },
    componentWillMount: function(){
        console.log('componentWillMount');
    },
    render: function(){
        console.log('render')
        return (<h1 onClick={this.click}>{this.state.text}</h1>);
    },
    componentDidMount: function(){
        console.log('componentDidMount');
    },
    click: function(){
        console.log('click');
        this.setState({text: "new text"});
    },
    componentWillUpdate: function(){
        console.log('componentWillUpdate');
    },
    componentDidUpdate: function(){
        console.log('componentDidUpdate');
    },
    componentWillUnmount: function(){
        console.log('componentWillUnmount');
    }
});
ReactDOM.render(
    <Test />,
    document.getElementById('example')
);
//getDefaultProps
//getInitialState
//componentWillMount
//render
//componentDidMount
//click
//componentWillUpdate
//render
//componentDidUpdate

//END ЖИЗНЕННЫЙ ЦИКЛ КОМПОНЕНТА

//Использование объекта компонента
var test = ReactDOM.render(
    <Test />,
    document.getElementById('example')
);
test.foo();

//ДОСТУП К DOM УЗЛУ
var Test = React.createClass({
    render: function(){
        return (<h1 ref="me">HELLO</h1>);
    },

    componentDidMount: function(){
        //Доступ по ссылке
        console.log(this.refs.me); //<h1>HELLO</h1>
    }
});
var test = ReactDOM.render(
    <Test />,
    document.getElementById('example')
);
//Доступ по объекту
console.log(ReactDOM.findDOMNode(test)); //<h1>HELLO</h1>
//END СОЗДАНИЕ СВЫЛКИ НА УЗЕЛ DOM

//СТАТИЧЕСКИЕ СВОЙСТВА
var Test = React.createClass({
    statics: {
        test: function() {console.log('test')}
    },
    render: function(){
        return (<h1>HELLO</h1>);
    }
});
var test = ReactDOM.render(
    <Test />,
    document.getElementById('example')
);
Test.test();

//PROPS ПО УМОЛЧАНИЮ
var Test = React.createClass({
    getDefaultProps: function(){
        return {text: 'HELP'};
    },
    render: function(){
        return (<h1>{this.props.text}</h1>);
    }
});
//END PROPS ПО УМОЛЧАНИЮ

//ПОЛУЧЕНИЕ КОМПОНЕНТА ИЗ DOM-УЗЛА
window.FindReact = function(dom) {
    for (var key in dom)
        if (key.startsWith("__reactInternalInstance$")) {
            var compInternals = dom[key]._currentElement;
            var compWrapper = compInternals._owner;
            var comp = compWrapper._instance;
            return comp;
        }
    return null;
};
var Test = React.createClass({...});
var el = document.getElementById("qwerty");
FindReact(el).doSmth();
//END ПОЛУЧЕНИЕ КОМПОНЕНТА ИЗ DOM-УЗЛА

//JSX - правила
//html - код должен быть объеденен в блок <div>
React.createClass({
  render: function(){
    return <div>...</div>
  }
});

//Вместо class используется className
<div className="settings-block">...</div>

//Вместо for используется htmlFor
<label htmlFor="exampleInputEmail1">Email</label>

//Тэги img и input обязательно закрывать
<img .../>
<input .../>

//tabIndex вместо tabindex
<div tabIndex="...">