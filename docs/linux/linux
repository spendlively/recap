//Управление автозагрузкой приложений в ubuntu
gnome-session-properties

//Вернуться в предыдущий каталог
cd -

//Скопировать несколько файлов в каталог
cp f1 f2 f3 dir/

//Создание символьной ссылки
ln -l цель ссылка

//Изменение символьной ссылки
ln -lf цель ссылка

//Конфигурирование сетевого интерфейса
sudo ifconfig eth0 10.0.0.1/24

//Конфигурирование маршрута на шлюз
sudo route add default gw 10.0.0.1

//Конфигурирование маршрута на хост
sudo route add -host 10.0.0.11 gw 10.0.0.1

//Конфигурирование маршрута на сеть
sudo route add -net 10.0.0.0/24 gw 10.0.0.1

//Удаление маршрута
route del default

//Слияние/Разбиение файлов
cat f1 f2 f3 > file
split -l 100 file
cat x* > file

//Вывод файла с нумерацией
cat -n file

//Вывод хвоста файла
tail -n +100

//Разбиение и вывод файла по полям
cut -f 1,5-7 -d :

//Разбиение и вывод файла по символам c 2 по 12
cut -c 2-12

//Сортировка по 7-му полю с разделителем :
sort -k7 -t:

//Сортировка по 7-му полю с разделителем : по числам
sort -k7 -t: -n

//Замена сомволов на лету
echo test | tr abcd ABCD
echo test | tr a-d A-D
echo test | tr : '\t'

//Удаление повторяющихся символов
tr -s a-z0-9

//Удаление некоторых символов
tr -d '0-9 /:-'

//Просмотр загруженных модулей
lsmod

//Просмотр доступных модулей
modprobe -l

//Просмотр информации о модуле
modinfo vbox3f

//Загрузка модуля
modprobe raid456
lsmod

//Удаление модуля
modprobe -r raid456
lsmod

//Просмотр информации о пользователе
id

//Просмотр текущего уровня выполнения (init 0 6)
runlevel

//Установка суидного, сгидного и sticky бита
chmod 7000 file

//Статус системы, свопа и т.д.
vmstat

//Смена пароля суперпользователя
sudo su -
passwd

//Добавить пользователя (-m дом каталог, -s bash, -u Id пользователя)
useradd -m -s /bin/bash -u 1111 username

//Пароль пользователя
passwd user

//Переконфигурировать пользователя
usermod -s /bin/bash username

//Информация о пользователе 
getenv passwd user

//Добавление группы
groupadd developers 
gpasswd -a username developers

//Заблокировать пользователя
usermod -L username

//Разблокировка пользователя
usermod -U username

//Просмотр заданий в фоне
jobs

//Отправить в фон
^z

//Заставить выполняться
bg %1

//Перевод на передний план
fg -
fg %3
fg +

//Остановка процесса
kill -STOP %1

//Параллельный запуск
./p1 & ./p2 & ./p3

//Последовательный запуск
./p1 ; ./p2 ; ./p3

//Удаление пользователя
userdel username

//Удаление пользователя с каталогом
userdel -r username

//Удаление пользователя с каталогом если он в системе
userdel -r -f username

//Кто в системе
w

//Кто в системе (виртуальные и псевдо терминалы)
who

//Выгнать с терминала
fuser /dev/tty1
fuser -f /dev/tty1

//Выгнать всех, кто на tty1
fuser -k -1 /dev/tty1

//Информация о примонтированных фс
cat /proc/mounts

//Разбиение диска 
fdisk /dev/sdb

//Монтирование файловых систем
nano /etc/fstab

//Переконфиурирование процесса
killall -1 bash

//Протоколы
cat /etc/protocols

//Соответствия порта протоколу
cat /etc/services

//DNS сервера
cat /etc/resolv.conf

//Порядок разыменовывания
/etc/nsswitch.conf
hosts: files dns

//ARP таблица
arp

//Получение ip-адресов по имене хоста
host ya.ru

//Получение имене хоста по ip-адресу
host 192.168.0.103

//Просмотр хостов почтовых серверов
host -t mx gmail.com

//Анализ трафика указанного сетевого интерфйса
//Терминал 1
tcpdump -i wlan0
//Терминал 2
ping localhost -c1

//Сканирование портов
nmap 192.168.0.111

//Проверка CD
cat /dev/cdrom > /dev/null

//Создание ISO-образа
dd if=/dev/cdrom of=disk.iso bs=1M

//Монтирование ISO-образа
mount -o loop disk.iso /tmp/point

//Монтирование ISO-образа с явным создание блочного устройства
loseup /dev/loop0 disk.iso
mount -r /dev/loop0 /tmp/cdrom

//Сохранение MBR (master boot record) диска
dd if=/dev/sda of=sda-mbr

//Отправка файла с помощью nc (net cat)
//Терминал 1
nc -l 5000 > save_to_file
//Терминал 2
cat some_file | nc 1257.0.0.1 5000

//Конфигурирование сетевых интерфейсов
nano /etc/network/interfaces
#localhost
auto lo 
iface lo inet loopback

auto eth0
iface eth0 inet static
	address 10.0.0.15
	netmask 255.255.255.0
	gateway 10.0.0.1

/etc/init.d/networking restart

//Выполнение команды на удаленном сервере
ssh spendlively@192.168.0.111 'cat /etc/hosts'

//Получение информации о дистрибутиве
uname -a

//Вывести crontab-список пользователя
crontab -l

//Удалить crontab-список пользователя
crontab -r

//Редактировать crontab-список пользователя
crontab -e

//Создание заданий, выполняемых по истечению времени
anacrontab

//Запуск всех скриптов в кататоге
run-parts

//Одноразовое выполнение задания по времени
at 18:30 [ENTER]
rm -rf /*

//Одноразовое выполнение задания через 2 минуты
at now +2 mins

//Очередь заданий

//Просмотр какому пакету принадлежит файл
dpkg -s file

//Просмотр требуемых библиотек
ldd /bin/ls

//Установить время
date -s 15:00

//Синхронизация времени
ntpdate ru.pod.ntp.date

//Работа с аппаратными часами
hwclock

BASH
//Выполнить команду bash
echo `date`
DATE=$(date)

//Массивы bash
m1=(1 2 3);
echo ${m1[0]};
m2=([0]=1 [1]=2 [2]=3);

//Вывод содержимого массива
echo "ALL - ${m1[*]}"
echo "ALL - ${m1[%]}"

//Оператор test (Пример: if [ -x /path ]; then echo "1"; else echo "2"; fi;)
&&) [x -a y]
||) [x -o y]
!) [!x]
==) [x -eq y]
!=) [x -ne y]
>) [x -gt y]
>=) [x -ge y]
<) [x -lt y]
<=) [x -le y]
!= "") [-n x]
== "") [-z x]
==) [x = y]
файл сущ-ет) [-e /path]
файл сущ-ет и яв обычным ф) [-f /path]
файл сущ-ет и яв каталогом) [-d /path]
файл сущ-ет и яв симв ссылка) [-L /path]
файл сущ-ет и читаем) [-r /path]
файл сущ-ет и доступен для чтения) [-w /path]
файл сущ-ет и выполняем) [-x /path]
файл сущ-ет и непуст) [-s /path]

//for для файлов
for x in `ls /path/*`
for x in ~/path/*

//SELECT
select FILE in *

//Функции
foo()
{
	ls -l $FILE
}
FILE=f1
foo

//Специальные переменные
$0 $1 .. $9 - имя файла и параметры
$* и $@ - все параметры ком. строки
$# - количество параметров
$? - код возврата программы
$! - pid пробраммы
$$ - pid процесса shell

//Скопировать с удаленного сервера
scp -r -q root@192.168.8.43:/usr/bin/aha ~/aha

//Изменение часовой зоны в debian linux
dpkg-reconfigure tzdata

//Перекодировка имен windows-файлов в unix
sudo apt-get install convmv
find . -type f -print -exec convmv --notest -f cp1251 -t utf8 {} \;

//Восстановление данных с отформатированной флешки
sudo apt-get install testdisk
sudo photorec

//Изменение часового пояса в ubuntu
dpkg-reconfigure tzdata

//Выкачивание html-страницы с помощью wget
//-p - преобразованием ссылок на локальные
//-k - сохранение контента (стили и скрипты)
//-t 0  - неограниченное количество попыток
wget -k -p -t 0  http://site.ru

//Создание ярлыка в меню ubuntu
cd /usr/share/applications/
sudo gedit name.desktop
[Desktop Entry]
Name=Android studio
Comment=Android studio
GenericName=
Keywords=
Exec=/home/spendlively/libgdx/android-studio/bin/studio.sh
Terminal=false
Type=Application
Icon=/home/spendlively/libgdx/android-studio/bin/studio.png
Path=/home/spendlively/libgdx/android-studio/
Categories=
NoDisplay=false

//Упрвление пакетами в debian/ubuntu
//APT-GET
sudo apt-get update //Обновление локального кэша пакетов
sudo apt-get upgrde //Обновление пактов без их удаления
sudo apt-get dist-upgrade //Обновление пакетов с удалелием по необходимости
apt-cache search package //Поиск пакета в кэше пакетов по описанию
sudo apt-get install package1 package2 //Установка пакетов из хранилища
sudo apt-get install package=version //Установка пакетов определенной версии
sudo apt-cache policy packge //Получить список доступных версий
sudo dpkg-reconfigure package //Переустановка пакета (для выполнения пост-установочных скриптов)
apt-get install -s package //Проверка возможности установки пакета (холостая установка)
apt-get -s dist-upgrade //Проверка возможности обновления системы
sudo apt-get install -y package //Установка с автоматическим подтверждением
sudo apt-get dist-upgrade -y //Обновление системы с автоматическим подтверждением
sudo apt-get install -f //Восстановление испорченных зависимостей пакетов
apt-get download package //Загрузка пакета в рабочий каталог без установки его
apt-get source package //Загрузка исходников пакета в рабочий каталог без установки его
sudo apt-get remove package //Удаление пакета без удаления конфигов
sudo apt-get purge package //Удаление пакета с удалением конфигов
sudo apt-get remove package //Удаление пакета без удаления конфигов
sudo apt-get autoremove //Удаление невостребованных зависимостей
sudo apt-get --purge autoremove //Удаление невостребованных зависимостей и конфигов
sudo apt-get autoclean //Очистка устаревших загруженных пакетов
apt-cache show package //Получение информации о пакете, зависимостях, версии, архитектуре, конфликтах...
apt-cache showpkg package //Получение полной ихформации, включая обратные зависимости
//DPKG
sudo dpkg -i file.deb //Установка файла пакета (--install)
//Список неудовлетворенных зависимостей можно установить в дальнейшем с помошью команды
sudo apt-get install -f
//Двухшаговая установка: распаковка и гастройка пакета deb
dpkg --unpack file.deb //Распаковка файла пакета
dpkg --configure file //Настройка пакета (без .deb)
dpkg --info file.deb //Получение информации о файле deb-пакета: название, зависимости, версия, архитектура...
apt-cache depends package //Отображение прямых зависимостей
apt-cache rdepends package //Отображение обратных зависимостей
dpkg -l //Вывод установленных пакетов
//Например: ii acl 0.0.1
//Где первый символ - состояние пакета:
u - неизвестно
i - установлен
r - удален с сохранением файлов настроек
p - удален без сохранения файлов настроек
h - удержание версии
//Второй символ - действительный статус пакета в системе управления пакетами:
n - не установлен
i - установлен
c - наличие файлов настроек, но сам пакет отсутствует
u - распакован, файлы распакованы но не настроены
f - пакет частично установлен - возникла ошибка в процессе установки 
w - пакет ожидает запуска от другого пакета
p - пакет был запущен из другого пакета
//Третий символ - пробел или "r" - требуется переустановка - файл испорчен и восстановить его невозможно

dpkg -l package* //Вывод состояния пакетов по маске
dpkg --get-selections //Вывод установленных и удаленных с сохранением настроек пакетов
dpkg --get-selections package*
dpkg -L package //Вывод установленных пакетом файлов без файлов настроек
dpkg -S path/to/file //Поиск пакета, ответственного за файл (только для файлов созданных во время установки)
sudo apt-file search /path/to/file //Какой пакет даст определенный файл до установки пакета (тоже для ф ч во в у)
dpkg --force-help //Просмотр подсказки по ключам --force-*
dpgk --force-overwrite
//ДОБАВЛЕНИЕ СПИСКОВ ПАКЕТОВ
...

//РАЗРЕШЕНИЕ ЗАВИСИМОСТЕЙ НА ПРИМЕРЕ УСТАНОВКИ WINE
sudo aptitude --full-resolver -f install wine1.6
Accept this solution? [Y/n/q/?] 4 //wine1.6 [Not Installed]
Accept this solution? [Y/n/q/?] r 4
Accept this solution? [Y/n/q/?] n
Accept this solution? [Y/n/q/?] Y
Do you want to continue? [Y/n/?] Y

//ПОДКЛЮЧЕНИЕ ПО SSH С ПОМОЩЬЮ RSA КЛЮЧЕЙ
//Сгенерировать пару ключей RSA 2048
ssh-keygen //Спросит каталог (.ssh) и пароль

//Передача публичного ключа на удаленную машину в рабочий каталог
scp .ssh/key.pub root@192.168.20.117:~/

//Настройка демона sshd на удаленной машине, чтобы он принимал ключ
mkdir .ssh
chmod 700 .ssh
cat key.pub >> .ssh/authorized_keys
chmod 644 .ssh/authorized_keys

//Запрещение входа по паролю на удаленной машине
nano /etc/ssh/sshd_config
PermitRootLogin no
PubkeyAuthentication yes
PasswordAuthentiocation no
PermitEmptyPasswords no

//Перезапускаем sshd на удаленной машине
service sshd restart

//Подключение к удаленной машине
ssh root@192.168.20.117 -i key.pub

//Настройка ключа по умолчанию
nano .ssh/config
Host spendlively
	Hostname 192.168.20.117
	User spendlively
	IdentityFile ~/.ssh/key.pub
	IdentitiesOnly yes # использовать только этот ключ

//Подключение у даленной машине вариант 2
ssh 192.168.20.117

//Перенос 22 порта на удаленной машине
nano /etc/ssh/sshd_config
Port 22222

//ПОДКЛЮЧЕНИЕ К GITHUB С ПОМОЩЬЮ SSH КЛЮЧА
//Создание ключей
ssh-keygen -t rsa -C 'spendlively@mail.ru'

//Сохраняю файлики key и key.pub в каталог ~/.ssh/

//Пересылаем публичный ключ на github
cat key.pub | pbcopy
//В браузере
http://github.com
Settings (верх правый угол) -> SSH keys -> Add SSH key
Title -> title
key -> paste
Addkey

//Клонируем репозиторий с помощью ссылки git
//Если склонировать с помощью ссылки https - ключ использоваться не будет
git clone git@github.com:spendlively/recap.git

//SED
//Изменить строку в файле
sed -i.bak -e 's/string1/string2/' file

//Копирование файлов с переименовыванием (file.txt -> /tmp/asd/file.sql)
ls | sed -e "p;s/.sql$/.txt/" | sed -e "s/\([^.]*.txt\)/\/tmp\/asd\/\1/" | xargs -n2 cp
//p;s - отображать исходные строки
//-n2 - максимум 2 аргумента

//CURL
//Инфа 
curl --help
curl --manual

//Verbose
curl -v

//Get
curl http://ya.ru

//Аутентификация
curl -c /tmp/ismsCookie 'http://192.168.101.63/auth/login/check' --data 'username=administrator&password1=passme' --compressed
//Запрос к API
curl -b /tmp/ismsCookie -L http://192.168.101.63/api/v1.0/json/profile/read/id/1/

//Отправка формы
//<form method="POST" action="handler.php">
//<input type=text name="birthyear">
//<input type=submit name=press value=" OK ">
//</form>
//GET-ом
curl "http://ya.ru/handler.php?birthyear=1905&press=OK"
//POST-ом
curl -d "birthyear=1905&press=OK" http://ya.ru/handler.php

//Загрузка файлов с помощью POST
//<form method="POST" enctype='multipart/form-data' action="handler.php">
//<input type=file name=upload>
//<input type=submit name=press value="OK">
//</form>
curl -F upload=@localfilename -F press=OK [URL]

//Отправка произвольных заголовков
curl \
    'http://www.voicerss.org/controls/speech.ashx?hl=en-us&src={$string}&c=mp3' \
    -H 'Accept-Encoding: gzip,deflate,sdch' \
    -H 'Accept-Language: en-US,en;q=0.8,ru;q=0.6' \
    -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36' \
    -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8' \
    -H 'Cache-Control: max-age=0' -H 'Cookie: ys=mailchrome.2.8.0' \ 
    -H 'Connection: keep-alive' \
    --compressed \
    > {$fullPath}.mp3

//Отладка
- Используйте ключ --trace-ascii для сохранения подробного отчета запросов, чтобы затем подробно изучить их и разобраться в проблеме.
- Убедитесь, что вы проверяете на cookies и используете их при необходимости (ключ чтения -b и сохранения -c)
- Укажите в поле 'user-agent' один из последних популярных браузеров
- Заполните поле 'referer' как это делает браузер
- Если вы используете POST-запросы, убедитесь, что все поля передаются в том же порядке, что и браузер (см. выше, пункт 4.5)

//HTTPS
curl https://that.secure.server.com
	
//Сертификаты
curl -E mycert.pem https://that.secure.server.com
-E, --cert <certificate[:password]>

//Cookies
curl -b "name=Daniel" www.cookiesite.com
-b, --cookie <name=data>
	
curl -D headers_and_cookies www.cookiesite.com
-D, --dump-header <file>

//PUT
curl -T uploadfile www.uploadhttp.com/receive.cgi
-T, --upload-file <file>

//Аутентификация
curl -u name:password www.secrets.com
curl -U proxyuser:proxypassword curl.haxx.se

//Referer
curl -e http://curl.haxx.se daniel.haxx.se
-e, --referer <URL>

//User Agent
curl -A "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)" [URL]
curl -A "Mozilla/4.73 [en] (X11; U; Linux 2.2.15 i686)" [URL]
-A, --user-agent <agent string>
	
//Перенаправления
curl -L www.sitethatredirects.com
-L, --location

//END CURL

//ВНУТРЕННЕЕ УСТРОЙСТВО ЯДРА ЛИНУКС

Обязанности ядра
1. API к аппаратуре
2. Управление ресурсами

Эти 2 пункта включают:
- предоставление интерфейса к системным ресурсам и устройствам
- взаимодействие между процессами
- планировщик процессорного времени
- обработка прерываний
- организация работы с файлами
- управление ресурсами
- разделение памяти между процессами

//СТАНДАРТ POSIX (Portable Operation System Interface)
Свод правил по которым программы могут взаимодействовать с некой абстрактной операционной системой.
Описывает абстрактный интерфейс, которому ОС может следовать.

//Системный вызов

Программа делает системный вызов, чтобы попросить что-то у ядра.

//Виртуальная память
- метод управления памятью компьютера, позволяющий выполнять программы, требующие больше оперативной памяти,
чем имеется в компьютере, путём автоматического перемещения частей программы между основной памятью и вторичным хранилищем (например, жёстким диском)
Диапазон адресов 0..4гб (32 разрядная система)
Диапазон пользователя начинается с отметки 0гб (user space 0..3гб)
Диапазон ядра начинается с отметки 3гб (kernal space  3..4гб)

В kernal space находится какой-то код.
Мы хотим передать ему управление из user space (с помощью jump или call)

У процессора есть регистр IP (Instruction Pointer - Указатель)
Он указывает на память с какой-то функцией.
Чтобы перейти на память с другой функцией нужно переключить указатель на это участок.

//Ресурсы, которыми управляет ядро
- процессор
- память
- переферия

Чтобы процесс не решил, что процессорное время принадлежит только ему, ядро x86 использует
- защищенный режим
- страничную адресацию
- таймер (прерывания) (устанавливает предел времени выполнения)

//DMA - Direct Memory Access (Прямой доступ к памяти)
 - режим обмена данными между устройствами компьютера или же между устройством и основной памятью,
в котором центральный процессор (ЦП) не участвует.
Так как данные не пересылаются в ЦП и обратно, скорость передачи увеличивается.

//NUMA - Non-Uniform Memory Access (неравномерный доступ к памяти)
схема реализации компьютерной памяти, используемая в мультипроцессорных системах,
когда время доступа к памяти определяется её расположением по отношению к процессору.

//SMP - Symmetric Multiprocessing (симметричная много процессорность)
 - архитектура многопроцессорных компьютеров, в которой два или более одинаковых процессора сравнимой производительности
подключаются единообразно к общей памяти (и периферийным устройствам) и выполняют одни и те же функции
(почему, собственно, система и называется симметричной)

//IPI - interprocessor interrupt (меж процессорные прерывания)
 - механизма для прерывания другого процессора или группу процессоров связанных одной шиной.
IPI используется для программного прерывания себя или другого процессора, для пересылки прерывания или оперативного управления

//APIC - advanced programmable interrupt controller (улучшенный программируемый контроллер прерываний. Он был добавлен в процессоре Pentium.)
Преимущества расширенного контроллера прерываний:
 - возможность реализации межпроцессорных прерываний — сигналов от одного процессора другому
 - поддержка до 256 входов IRQ, в отличие от 15 на классической IBM PC
 - крайне быстрый доступ к регистрам текущего приоритета прерывания и подтверждения прерывания.
//io APIC - input output
//lAPIC - local

VT-x - virtualization (Аппаратная виртуализация)
 - виртуализация с поддержкой специальной процессорной архитектуры.
В отличие от программной виртуализации, с помощью данной техники возможно использование изолированных гостевых систем,
управляемых гипервизором напрямую. Гостевая система не зависит от архитектуры хостовой платформы и реализации платформы виртуализации.

//Уровни привилегий на х86 (4)
0 (для ядра системы)
1 -
2 (для процедур ввода-вывода)
3 (для прикладных программ).

//Типы ядер
1.1	Монолитное ядро
1.2	Модульное ядро
1.3	Микроядро
1.4	Экзоядро
1.5	Наноядро
1.6	Гибридное ядро


Монолитное - быстрее работает
Микроядро - все ядро - подсистема взаимодействия всех подсистем + система управления памятью (Достоинства: безопасность, легче разрабатывать)

Линукс - модульное ядро

Интерфейс к линуксовому ядру - системный вызов

//Подсистемы ядра
- Работа с файлами
- Управление памятью
- Сетевая подсистема
- Ввод-вывод

IPC - inter process comunication

//printf(Hello world)
User space (printf) -> write -> syscall -> системные вызовы (sys_write) -> ядро

//procfs
файловая система, кот. предоставляет инфу о выполняющихся на ядре процессах
(т.к. в ядре нет ни одного syscall, который бы это рассказать)

//sysctl
подсистема в ядре, интерфейс кот позволяет менять константы в ядре пользователю

//netlink
тип сокетов - получателем данных которого является ядро
на netlink 99% api к сетевой подсистеме


//Подсистема VFS - virtual file system
- интерфейс ко всем файловым системам в линукс, которые только существуют

//Файловые системы
Дисковые фс (fat, ntfs, ext[2,3,4], raizerfs, bfrfs)
Сетевые фc (samba, nfs) - центролизованные фс (хранятся на сервере)
Распределенные фс (googlefs, zfs, CEPH, Cluster)
Виртуальные фс (debugfs, procfs, sysfs)

- Файловая система начинается со структуры fs_type
- Из fs_type при монтировании фс появляются описатели конкретных фс superblock
- Каждый sb в самом начеле тащит на себе пару dentry и inode (Корневая dentry "/")
- Описание фс сразу после моттирования выглядит как superblock + dentry + inode
- Когда пользователь начинает лазить по фс у dentry начинают прирастать потомки со своими inode


//END ВНУТРЕННЕЕ УСТРОЙСТВО ЯДРА ЛИНУКС

//10 полезных утилит Linux для повышения производительности системы
https://tproger.ru/digest/useful-linux-utilities/