/////////////////////////////////////////////////
//////////////////Дата и время///////////////////
/////////////////////////////////////////////////

//JS сложение времени (+1 час)
var start = new Date(2016, 0, 1, 1, 0, 0, 0);
console.log(new Date(+start));
console.log(new Date(+start + 60*60*1000));
console.log(new Date(start.getTime() + 60*60*1000));

//Форматирование времени
Ext.Date.format(new Date(), 'Y-m-d');
//Ext.Date.parse(Ext.Date.format(new Date(), 'Y-m-d'), 'Y-m-d');

Format      Description                                                               Example returned values
------      -----------------------------------------------------------------------   -----------------------
  d         Day of the month, 2 digits with leading zeros                             01 to 31
  D         A short textual representation of the day of the week                     Mon to Sun
  j         Day of the month without leading zeros                                    1 to 31
  l         A full textual representation of the day of the week                      Sunday to Saturday
  N         ISO-8601 numeric representation of the day of the week                    1 (for Monday) through 7 (for Sunday)
  S         English ordinal suffix for the day of the month, 2 characters             st, nd, rd or th. Works well with j
  w         Numeric representation of the day of the week                             0 (for Sunday) to 6 (for Saturday)
  z         The day of the year (starting from 0)                                     0 to 364 (365 in leap years)
  W         ISO-8601 week number of year, weeks starting on Monday                    01 to 53
  F         A full textual representation of a month, such as January or March        January to December
  m         Numeric representation of a month, with leading zeros                     01 to 12
  M         A short textual representation of a month                                 Jan to Dec
  n         Numeric representation of a month, without leading zeros                  1 to 12
  t         Number of days in the given month                                         28 to 31
  L         Whether it's a leap year                                                  1 if it is a leap year, 0 otherwise.
  o         ISO-8601 year number (identical to (Y), but if the ISO week number (W)    Examples: 1998 or 2004
            belongs to the previous or next year, that year is used instead)
  Y         A full numeric representation of a year, 4 digits                         Examples: 1999 or 2003
  y         A two digit representation of a year                                      Examples: 99 or 03
  a         Lowercase Ante meridiem and Post meridiem                                 am or pm
  A         Uppercase Ante meridiem and Post meridiem                                 AM or PM
  g         12-hour format of an hour without leading zeros                           1 to 12
  G         24-hour format of an hour without leading zeros                           0 to 23
  h         12-hour format of an hour with leading zeros                              01 to 12
  H         24-hour format of an hour with leading zeros                              00 to 23
  i         Minutes, with leading zeros                                               00 to 59
  s         Seconds, with leading zeros                                               00 to 59
  u         Decimal fraction of a second                                              Examples:
            (minimum 1 digit, arbitrary number of digits allowed)                     001 (i.e. 0.001s) or
                                                                                      100 (i.e. 0.100s) or
                                                                                      999 (i.e. 0.999s) or
                                                                                      999876543210 (i.e. 0.999876543210s)
  O         Difference to Greenwich time (GMT) in hours and minutes                   Example: +1030
  P         Difference to Greenwich time (GMT) with colon between hours and minutes   Example: -08:00
  T         Timezone abbreviation of the machine running the code                     Examples: EST, MDT, PDT ...
  Z         Timezone offset in seconds (negative if west of UTC, positive if east)    -43200 to 50400
  c         ISO 8601 date
            Notes:                                                                    Examples:
            1) If unspecified, the month / day defaults to the current month / day,   1991 or
               the time defaults to midnight, while the timezone defaults to the      1992-10 or
               browser's timezone. If a time is specified, it must include both hours 1993-09-20 or
               and minutes. The "T" delimiter, seconds, milliseconds and timezone     1994-08-19T16:20+01:00 or
               are optional.                                                          1995-07-18T17:21:28-02:00 or
            2) The decimal fraction of a second, if specified, must contain at        1996-06-17T18:22:29.98765+03:00 or
               least 1 digit (there is no limit to the maximum number                 1997-05-16T19:23:30,12345-0400 or
               of digits allowed), and may be delimited by either a '.' or a ','      1998-04-15T20:24:31.2468Z or
            Refer to the examples on the right for the various levels of              1999-03-14T20:24:32Z or
            date-time granularity which are supported, or see                         2000-02-13T21:25:33
            http://www.w3.org/TR/NOTE-datetime for more info.                         2001-01-12 22:26:34
  U         Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)                1193432466 or -2138434463
  MS        Microsoft AJAX serialized dates                                           \/Date(1238606590509)\/ (i.e. UTC milliseconds since epoch) or
                                                                                      \/Date(1238606590509+0800)\/
  time      A javascript millisecond timestamp                                        1350024476440
  timestamp A UNIX timestamp (same as U)                                              1350024866

//Дебаг классов в Extjs
Ext.define('BufferInfo', {
    override: 'Ext.grid.plugin.BufferedRenderer',
    setBodyTop: function(bodyTop) {
        debugger;
        this.callParent(arguments);
    }
});

//Инициализация приложения
Ext.onReady(function(){
    Ext.application({
        name: 'MyApp',
        launch: function(){}
    });
});

//Инициализация viewport
Ext.onReady(function(){
    var childPanel = Ext.create('Ext.panel.Panel', {
        title: 'Child Panel 1',
        html: 'A Panel'
    });
    Ext.create('Ext.container.Viewport', {
        items: [childPanel]
    });
});

//Callback при загрузке класса
Ext.define('Test', {
    constructor: function(){
        console.log('CONSTRUCTOR')
    }
}, function(){
    console.log('CALLBACK')
});

//Сonfig, геттеры и сеттеры
Ext.define('My.own.Window', {
    extend: 'Ext.window.Window',
    isWindow: true,
    config: {
        title: 'Title Here'
    },
    applyTitle: function(title) {
        if (!this.title && title){
            this.title = title;
        }
    }
});
var myWindow = Ext.create('My.own.Window', {
     renderTo: Ext.getBody(),
     width: 200,
     height: 150,
     bodyPadding: 5,
     html: 'HTML'
});
myWindow.setTitle('TITLE');
myWindow.show();
console.log(myWindow.getTitle());

//Создание собственного компонента
Ext.define('Ext.ux.Image', {
    extend: 'Ext.Component',
    alias: 'widget.managedimage',
    autoEl: {
        tag: 'img',
        src: Ext.BLANK_IMAGE_URL,
        cls: 'my-managed-image'
    },
    onRender: function() {
        this.autoEl = Ext.apply({}, this.initialConfig, this.autoEl);
        this.callParent(arguments);
        this.el.on('load', this.onLoad, this);
    },
    onLoad: function() {
        this.fireEvent('load', this);
    },
    setSrc: function(src) {
        if (this.rendered) {
            this.el.dom.src = src;
        } else {
            this.src = src;
        }
    },
    getSrc: function(src) {
        return this.el.dom.src || this.src;
    }
});
var image = Ext.create('Ext.ux.Image');
Ext.create('Ext.panel.Panel', {
    title: 'Image Panel',
    height: 200,
    renderTo: Ext.getBody(),
    items: [ image ]
});
image.on('load', function() {
    console.log('image loaded: ', image.getSrc());
});
image.setSrc('http://www.sencha.com/img/sencha-large.png');

//Обновление layout вручную
var container = Ext.create('Ext.panel.Panel', {
    renderTo: Ext.getBody(),
    width: 400,
    height: 200,
    title: 'Parent',
    suspendLayout: true
});
container.add({
    xtype: 'panel',
    title: 'Child'
});
container.suspendLayout = false;
container.updateLayout();

//5 способов рендеринга html внутри контейнера
items: [{
        html: "<a href='#'>1. HTML property of a panel</a>",
        xtype: "panel"
    },{
        xtype: "panel",
        html: new Ext.XTemplate("<a href='#'>{value}").apply({
            value: '2. HTML property of a panel generated by an XTemplate'
        })
    },{
        xtype: 'box',
        autoEl: {
            tag: 'a',
            html: '3. Dom element created by a DomHelper and wrapped as Component',
            href: '#'
        }
    },{
        tpl: "<a href='#'>{value}",
        data: {value: 'qwerty'}
    },{
        renderTpl: '<span>Hello {name}</span>',
        renderData: {name: 'LeVeon'}
    }
]

//Выборка DOM-элементов
//QUERY
//HTMLElement Ext.query(selector/xpath, [HTMLElement], ["select"||"simple"], [single=true])
var query = Ext.query('#element-id');
query.removeCls('cls-name');
query.addCls('cls-name');
query.applyStyles("width: 100%; height: 100%;");

//SELECT
//Ext.CompositeElementLite/Ext.CompositeElement Ext.select(String/HTMLElement, [unique:bool], [root:HTMLElement/String])
var select = Ext.select('#element-id');
select.removeCls('cls-name');
select.addCls('cls-name');
select.applyStyles("width: 100%; height: 100%;");

//GET
//Ext.dom.Element Ext.get(String/HTMLElement/Ext.Element);
var get = Ext.get('element-id');
get.getAttribute('class');
get.applyStyles("background:#B5B8C8;");
get.removeCls('cls-name');
get.addCls('cls-name');

//FLY
//Ext.dom.Element.Fly Ext.fly(String/HTMLElement, [named:String])
var fly = Ext.fly(grid.getView().getNode(record));
var rowEls = fly.query('.x-grid-cell');

//GETCMP
//Ext.Component Ext.getCmp(String);
var cmp = Ext.getCmp('element-id');

//2 варианта добавления нескольких обработчиков на одно событие
//1: наследование
Ext.define('Child', {
    extend: 'Parent',
    constructor: function(config){
        var cfg = this.callParent(arguments);
        this.on({
            beforeshow: function(){
                console.log(222)
            }
        });
        return cfg;
    }
});
Ext.create('Child', {
    listeners: {
        beforeshow: function(){
            console.log(111)
        }
    }
});

//2: композиция
Ext.define('Child', {
    constructor: function(config){
        var tip = Ext.create('Parent', config);
        tip.on({
            beforeshow: function(ths){
                console.log(222)
            },
        });
        return tip;
    }
});
Ext.create('Child', {
    listeners: {
        beforeshow: function(){
            console.log(111)
        }
    }
});

//DATA PACKAGE
//MODEL
//Инициализация класса модели
Ext.define('User', {
    extend: 'Ext.data.Model',
    fields: ['id', 'name', 'age'],
    proxy: {
        type: 'rest',
        url : '/users.php',
        reader: {
            type: 'json',
            root: 'users'
        }
    }
});

//Создание объекта
var user = Ext.create('User', {
    name: 'Konstantin',
    age : 29
});

//Получение свойства name
user.get('name');

//Изменение свойства name
user.set('name', 'Ivan');

//Сохранение объекта (POST /users.php)
user.save({
    success: function(user) {
        console.log(user.getId());
    }
});

//Получение объекта модели (GET /users.php/1)
var User = Ext.ModelMgr.getModel('User');
User.load(1, {
    success: function(user) {
        console.log(user.get('name'));
    }
});

//Сообщение proxy уничтожить объект
user.destroy({
    success: function() {}
});

//STORE
//Создание store на основе model с автозагрузкой
var store = Ext.create('Ext.data.Store', {
    model: 'User',
    proxy: {
        type: 'ajax',
        url: '/users.json',
        reader: {
            type: 'json',
            root: 'users'
        }
    },
    autoLoad: true //автозагрузка (GET /users.json)
});

//Загрузка объектов (GET /users.json)
store.load({
    params: {
        group: 3,
        type: 'user'
    },
    callback: function(records, operation, success) {
        console.log(records)
        // do something after the load finishes
    },
    scope: this
});

//Создание store с сортировкой и фильтрацией
var store = Ext.create('Ext.data.Store', {
    model: 'User',
    sorters: [{
        property: 'age',
        direction: 'DESC'
    },{
        property: 'firstName',
        direction: 'ASC'
    }],

    filters: [{
        property: 'firstName',
        value: /Ed/
    }]
});


//Фильтрация
store.filter('eyeColor', 'Brown');

//Сортировка
store.sort('height', 'ASC');

//Добавить сортировщик
store.sorters.add(new Ext.util.Sorter({
    property : 'shoeSize',
    direction: 'ASC'
}));
store.sort();

//Добавление модели в store
store.add(
    {name: 'Konstantin', age : 29},
    {name: 'Roman', age : 30}
);

//Поиск модели в store по полю name
store.findRecord(me.params.field, me.params.value, null, null, null, true);

//Поиск id модели в store по полю name
store.find('name', 'Konstantin', null, null, null, true);

//УСКОРЕНИЕ ГРАФИКОВ
//suspend store events
chartStore.suspendEvents(false);
chartStore.loadData(data);
chartStore.resumeEvents();

//turn off shadows in charts
var chart1 = Ext.create('Ext.chart.Chart',{
        xtype: 'chart',
        animate: false,
        shadow : false,
..
});

//turn off markers in each series
showMarkers: false

//use compress ext for testing (not debug version)
ext-all.js  // instead of ext-all-debug.js

//END УСКОРЕНИЕ ГРАФИКОВ