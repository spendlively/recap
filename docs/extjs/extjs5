//Дебаг классов в Extjs
Ext.define('BufferInfo', {
    override: 'Ext.grid.plugin.BufferedRenderer',
    setBodyTop: function(bodyTop) {
        debugger;
        this.callParent(arguments);
    }
});

//Инициализация приложения
Ext.onReady(function(){
    Ext.application({
        name: 'MyApp',
        launch: function(){}
    });
});

//Инициализация viewport
Ext.onReady(function(){
    var childPanel = Ext.create('Ext.panel.Panel', {
        title: 'Child Panel 1',
        html: 'A Panel'
    });
    Ext.create('Ext.container.Viewport', {
        items: [childPanel]
    });
});

//Callback при загрузке класса
Ext.define('Test', {
    constructor: function(){
        console.log('CONSTRUCTOR')
    }
}, function(){
    console.log('CALLBACK')
});

//Сonfig, геттеры и сеттеры
Ext.define('My.own.Window', {
    extend: 'Ext.window.Window',
    isWindow: true,
    config: {
        title: 'Title Here'
    },
    applyTitle: function(title) {
        if (!this.title && title){
            this.title = title;
        }
    }
});
var myWindow = Ext.create('My.own.Window', {
     renderTo: Ext.getBody(),
     width: 200,
     height: 150,
     bodyPadding: 5,
     html: 'HTML'
});
myWindow.setTitle('TITLE');
myWindow.show();
console.log(myWindow.getTitle());

//Создание собственного компонента
Ext.define('Ext.ux.Image', {
    extend: 'Ext.Component',
    alias: 'widget.managedimage',
    autoEl: {
        tag: 'img',
        src: Ext.BLANK_IMAGE_URL,
        cls: 'my-managed-image'
    },
    onRender: function() {
        this.autoEl = Ext.apply({}, this.initialConfig, this.autoEl);
        this.callParent(arguments);
        this.el.on('load', this.onLoad, this);
    },
    onLoad: function() {
        this.fireEvent('load', this);
    },
    setSrc: function(src) {
        if (this.rendered) {
            this.el.dom.src = src;
        } else {
            this.src = src;
        }
    },
    getSrc: function(src) {
        return this.el.dom.src || this.src;
    }
});
var image = Ext.create('Ext.ux.Image');
Ext.create('Ext.panel.Panel', {
    title: 'Image Panel',
    height: 200,
    renderTo: Ext.getBody(),
    items: [ image ]
});
image.on('load', function() {
    console.log('image loaded: ', image.getSrc());
});
image.setSrc('http://www.sencha.com/img/sencha-large.png');

//Обновление layout вручную
var container = Ext.create('Ext.panel.Panel', {
    renderTo: Ext.getBody(),
    width: 400,
    height: 200,
    title: 'Parent',
    suspendLayout: true
});
container.add({
    xtype: 'panel',
    title: 'Child'
});
container.suspendLayout = false;
container.updateLayout();

//3 способа рендеринга html внутри контейнера
items: [{
    html: "<a href='#'>1. HTML property of a panel</a>",
    xtype: "panel"},
    {
        xtype: "panel",
        html: new Ext.XTemplate("<a href='#'>{value}").apply({
            value: '2. HTML property of a panel generated by an XTemplate'
        })},
    {
        xtype: 'box',
        autoEl: {
            tag: 'a',
            html: '3. Dom element created by a DomHelper and wrapped as Component',
            href: '#'
        }
    }
]
